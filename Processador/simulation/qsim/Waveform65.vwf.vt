// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/30/2020 12:01:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          unit_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module unit_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg in_ready;
reg [0:3] opcode;
reg [0:3] operation;
reg wake_up;
// wires                                               
wire [3:0] alu_op;
wire [2:0] branch_comp;
wire done_inst;
wire in_req;
wire [2:0] loc_write;
wire mem_write;
wire new_out;
wire [1:0] op_b;
wire [1:0] pc_orig;
wire pc_write;
wire [1:0] rd_orig;
wire reg_write;
wire [3:0] write_d_sel;

// assign statements (if any)                          
unit_control i1 (
// port map - connection between master ports and signals/registers   
	.alu_op(alu_op),
	.branch_comp(branch_comp),
	.clk(clk),
	.done_inst(done_inst),
	.in_ready(in_ready),
	.in_req(in_req),
	.loc_write(loc_write),
	.mem_write(mem_write),
	.new_out(new_out),
	.op_b(op_b),
	.opcode(opcode),
	.operation(operation),
	.pc_orig(pc_orig),
	.pc_write(pc_write),
	.rd_orig(rd_orig),
	.reg_write(reg_write),
	.wake_up(wake_up),
	.write_d_sel(write_d_sel)
);
initial 
begin 
#500000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b1;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b1;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b1;
end 
// operation[ 3 ]
initial
begin
	operation[3] = 1'b1;
end 
// operation[ 2 ]
initial
begin
	operation[2] = 1'b0;
end 
// operation[ 1 ]
initial
begin
	operation[1] = 1'b1;
end 
// operation[ 0 ]
initial
begin
	operation[0] = 1'b0;
end 

// in_ready
initial
begin
	in_ready = 1'b0;
end 

// wake_up
initial
begin
	wake_up = 1'b0;
end 
endmodule

