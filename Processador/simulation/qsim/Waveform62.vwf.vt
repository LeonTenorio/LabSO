// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2020 10:36:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] adress;
reg clk;
reg mem_write;
reg [31:0] write_data;
// wires                                               
wire [31:0] read;

// assign statements (if any)                          
memory i1 (
// port map - connection between master ports and signals/registers   
	.adress(adress),
	.clk(clk),
	.mem_write(mem_write),
	.read(read),
	.write_data(write_data)
);
initial 
begin 
#1000000 $finish;
end 
// adress[ 31 ]
initial
begin
	adress[31] = 1'b0;
end 
// adress[ 30 ]
initial
begin
	adress[30] = 1'b0;
end 
// adress[ 29 ]
initial
begin
	adress[29] = 1'b0;
end 
// adress[ 28 ]
initial
begin
	adress[28] = 1'b0;
end 
// adress[ 27 ]
initial
begin
	adress[27] = 1'b0;
end 
// adress[ 26 ]
initial
begin
	adress[26] = 1'b0;
end 
// adress[ 25 ]
initial
begin
	adress[25] = 1'b0;
end 
// adress[ 24 ]
initial
begin
	adress[24] = 1'b0;
end 
// adress[ 23 ]
initial
begin
	adress[23] = 1'b0;
end 
// adress[ 22 ]
initial
begin
	adress[22] = 1'b0;
end 
// adress[ 21 ]
initial
begin
	adress[21] = 1'b0;
end 
// adress[ 20 ]
initial
begin
	adress[20] = 1'b0;
end 
// adress[ 19 ]
initial
begin
	adress[19] = 1'b0;
end 
// adress[ 18 ]
initial
begin
	adress[18] = 1'b0;
end 
// adress[ 17 ]
initial
begin
	adress[17] = 1'b0;
end 
// adress[ 16 ]
initial
begin
	adress[16] = 1'b0;
end 
// adress[ 15 ]
initial
begin
	adress[15] = 1'b0;
end 
// adress[ 14 ]
initial
begin
	adress[14] = 1'b0;
end 
// adress[ 13 ]
initial
begin
	adress[13] = 1'b0;
end 
// adress[ 12 ]
initial
begin
	adress[12] = 1'b0;
end 
// adress[ 11 ]
initial
begin
	adress[11] = 1'b1;
end 
// adress[ 10 ]
initial
begin
	adress[10] = 1'b0;
end 
// adress[ 9 ]
initial
begin
	adress[9] = 1'b0;
end 
// adress[ 8 ]
initial
begin
	adress[8] = 1'b0;
end 
// adress[ 7 ]
initial
begin
	adress[7] = 1'b0;
end 
// adress[ 6 ]
initial
begin
	adress[6] = 1'b0;
end 
// adress[ 5 ]
initial
begin
	adress[5] = 1'b0;
end 
// adress[ 4 ]
initial
begin
	adress[4] = 1'b0;
end 
// adress[ 3 ]
initial
begin
	adress[3] = 1'b0;
end 
// adress[ 2 ]
initial
begin
	adress[2] = 1'b0;
end 
// adress[ 1 ]
initial
begin
	adress[1] = 1'b1;
end 
// adress[ 0 ]
initial
begin
	adress[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// mem_write
initial
begin
	mem_write = 1'b1;
end 
// write_data[ 31 ]
initial
begin
	write_data[31] = 1'b0;
end 
// write_data[ 30 ]
initial
begin
	write_data[30] = 1'b0;
end 
// write_data[ 29 ]
initial
begin
	write_data[29] = 1'b0;
end 
// write_data[ 28 ]
initial
begin
	write_data[28] = 1'b0;
end 
// write_data[ 27 ]
initial
begin
	write_data[27] = 1'b0;
end 
// write_data[ 26 ]
initial
begin
	write_data[26] = 1'b0;
end 
// write_data[ 25 ]
initial
begin
	write_data[25] = 1'b0;
end 
// write_data[ 24 ]
initial
begin
	write_data[24] = 1'b0;
end 
// write_data[ 23 ]
initial
begin
	write_data[23] = 1'b0;
end 
// write_data[ 22 ]
initial
begin
	write_data[22] = 1'b0;
end 
// write_data[ 21 ]
initial
begin
	write_data[21] = 1'b0;
end 
// write_data[ 20 ]
initial
begin
	write_data[20] = 1'b0;
end 
// write_data[ 19 ]
initial
begin
	write_data[19] = 1'b0;
end 
// write_data[ 18 ]
initial
begin
	write_data[18] = 1'b0;
end 
// write_data[ 17 ]
initial
begin
	write_data[17] = 1'b0;
end 
// write_data[ 16 ]
initial
begin
	write_data[16] = 1'b0;
end 
// write_data[ 15 ]
initial
begin
	write_data[15] = 1'b0;
end 
// write_data[ 14 ]
initial
begin
	write_data[14] = 1'b0;
end 
// write_data[ 13 ]
initial
begin
	write_data[13] = 1'b0;
end 
// write_data[ 12 ]
initial
begin
	write_data[12] = 1'b0;
end 
// write_data[ 11 ]
initial
begin
	write_data[11] = 1'b0;
end 
// write_data[ 10 ]
initial
begin
	write_data[10] = 1'b0;
end 
// write_data[ 9 ]
initial
begin
	write_data[9] = 1'b0;
end 
// write_data[ 8 ]
initial
begin
	write_data[8] = 1'b0;
end 
// write_data[ 7 ]
initial
begin
	write_data[7] = 1'b0;
end 
// write_data[ 6 ]
initial
begin
	write_data[6] = 1'b0;
end 
// write_data[ 5 ]
initial
begin
	write_data[5] = 1'b1;
	write_data[5] = #470000 1'b0;
end 
// write_data[ 4 ]
initial
begin
	write_data[4] = 1'b1;
	write_data[4] = #470000 1'b0;
	write_data[4] = #180000 1'b1;
end 
// write_data[ 3 ]
initial
begin
	write_data[3] = 1'b0;
end 
// write_data[ 2 ]
initial
begin
	write_data[2] = 1'b1;
	write_data[2] = #470000 1'b0;
end 
// write_data[ 1 ]
initial
begin
	write_data[1] = 1'b0;
	write_data[1] = #650000 1'b1;
end 
// write_data[ 0 ]
initial
begin
	write_data[0] = 1'b1;
	write_data[0] = #470000 1'b0;
end 
endmodule

